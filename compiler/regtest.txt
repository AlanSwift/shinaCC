
int binarySearch(int *a, int len, int key);
int f(int a)
{
	int b;
	a=a+1;
	b=0;
	b=b+1;
	return a+1;
}

int main()
{
	int a[10];
	int i, j;
	char *c;
	int (*fp)(int*, int, int);
	fp = binarySearch;
	i = 0;
	c = "hello world";
	if(a[i] < 10 || a[i] > 20)
		a[i] = 1;
	for(i = 1; i <= 10; i += 1)
		for(j = 1; j <= 20; j += 1)
			a[i] = i + j;
	for(i = 0; i < 10; i += 1){
		a[i] = 100 - i;
	}
	i = fp(a, 10, 91);
	i = binarySearch(a, 10, 91);
	return 0;
}

int binarySearch(int *a, int len, int key)
{
	int left, right, mid;
	left = 0, right = len - 1;
	while(left <= right){
		mid = (left + right) / 2;
		if(a[mid] == key)
			return mid;
		else if(a[mid] < key)
			left = mid + 1;
		else
			right = mid - 1;
	}
	return -1;
}
-------------------------------------------------------
TranslationUnitDecl_
-FunctionDecl_: binarySearch, int, 00000000
--ParmVarDecl_: a, int *
--ParmVarDecl_: len, int
--ParmVarDecl_: key, int
-FunctionDecl_: f, int, 00000000
--ParmVarDecl_: a, int
--CompoundStmt_: locals:0  
---DeclStmt_
----VarDecl_: b, int
---ExprStmt_
----AssignExpr_: '=', NULL
-----DeclRefExpr_: a, NULL, 00000000
-----BinaryOpExpr_: '+', NULL
------DeclRefExpr_: a, NULL, 00000000
------IntLiteral_: 1 int
---ExprStmt_
----AssignExpr_: '=', NULL
-----DeclRefExpr_: b, NULL, 00000000
-----IntLiteral_: 0 int
---ExprStmt_
----AssignExpr_: '=', NULL
-----DeclRefExpr_: b, NULL, 00000000
-----BinaryOpExpr_: '+', NULL
------DeclRefExpr_: b, NULL, 00000000
------IntLiteral_: 1 int
---ReturnStmt_
----BinaryOpExpr_: '+', NULL
-----DeclRefExpr_: a, NULL, 00000000
-----IntLiteral_: 1 int
-FunctionDecl_: main, int, 00000000
--CompoundStmt_: locals:0  
---DeclStmt_
----VarDecl_: a, int []
---DeclStmt_
----VarDecl_: i, int
----VarDecl_: j, int
---DeclStmt_
----VarDecl_: c, char *
---DeclStmt_
----VarDecl_: fp, int  (int *, int, int, ) *
---ExprStmt_
----AssignExpr_: '=', NULL
-----DeclRefExpr_: fp, NULL, ec7500f2
-----DeclRefExpr_: binarySearch, NULL, 00000000
---ExprStmt_
----AssignExpr_: '=', NULL
-----DeclRefExpr_: i, NULL, 00000000
-----IntLiteral_: 0 int
---ExprStmt_
----AssignExpr_: '=', NULL
-----DeclRefExpr_: c, NULL, 00000000
-----StrLiteral_: À{É char *
---IfStmt_
----BinaryOpExpr_: '||', NULL
-----BinaryOpExpr_: '<', NULL
------ArraySubscriptExpr_ NULL
-------DeclRefExpr_: a, NULL, 00000000
-------DeclRefExpr_: i, NULL, 00000000
------IntLiteral_: 10 int
-----BinaryOpExpr_: '>', NULL
------ArraySubscriptExpr_ NULL
-------DeclRefExpr_: a, NULL, 00000000
-------DeclRefExpr_: i, NULL, 00000000
------IntLiteral_: 20 int
----ExprStmt_
-----AssignExpr_: '=', NULL
------ArraySubscriptExpr_ NULL
-------DeclRefExpr_: a, NULL, 00000000
-------DeclRefExpr_: i, NULL, 00000000
------IntLiteral_: 1 int
---ForStmt_
----AssignExpr_: '=', NULL
-----DeclRefExpr_: i, NULL, 00000000
-----IntLiteral_: 1 int
----BinaryOpExpr_: '<=', NULL
-----DeclRefExpr_: i, NULL, 00000000
-----IntLiteral_: 10 int
----AssignExpr_: '+=', NULL
-----DeclRefExpr_: i, NULL, 00000000
-----IntLiteral_: 1 int
----ForStmt_
-----AssignExpr_: '=', NULL
------DeclRefExpr_: j, NULL, 00000000
------IntLiteral_: 1 int
-----BinaryOpExpr_: '<=', NULL
------DeclRefExpr_: j, NULL, 00000000
------IntLiteral_: 20 int
-----AssignExpr_: '+=', NULL
------DeclRefExpr_: j, NULL, 00000000
------IntLiteral_: 1 int
-----ExprStmt_
------AssignExpr_: '=', NULL
-------ArraySubscriptExpr_ NULL
--------DeclRefExpr_: a, NULL, 00000000
--------DeclRefExpr_: i, NULL, 00000000
-------BinaryOpExpr_: '+', NULL
--------DeclRefExpr_: i, NULL, 00000000
--------DeclRefExpr_: j, NULL, 00000000
---ForStmt_
----AssignExpr_: '=', NULL
-----DeclRefExpr_: i, NULL, 00000000
-----IntLiteral_: 0 int
----BinaryOpExpr_: '<', NULL
-----DeclRefExpr_: i, NULL, 00000000
-----IntLiteral_: 10 int
----AssignExpr_: '+=', NULL
-----DeclRefExpr_: i, NULL, 00000000
-----IntLiteral_: 1 int
----CompoundStmt_: locals:0  
-----ExprStmt_
------AssignExpr_: '=', NULL
-------ArraySubscriptExpr_ NULL
--------DeclRefExpr_: a, NULL, 00000000
--------DeclRefExpr_: i, NULL, 00000000
-------BinaryOpExpr_: '-', NULL
--------IntLiteral_: 100 int
--------DeclRefExpr_: i, NULL, 00000000
---ExprStmt_
----AssignExpr_: '=', NULL
-----DeclRefExpr_: i, NULL, 00000000
-----CallExpr_ NULL
------DeclRefExpr_: fp, NULL, 00000000
------DeclRefExpr_: a, NULL, 00000000
------IntLiteral_: 10 int
------IntLiteral_: 91 int
---ExprStmt_
----AssignExpr_: '=', NULL
-----DeclRefExpr_: i, NULL, 00000000
-----CallExpr_ NULL
------DeclRefExpr_: binarySearch, NULL, 00000000
------DeclRefExpr_: a, NULL, 00000000
------IntLiteral_: 10 int
------IntLiteral_: 91 int
---ReturnStmt_
----IntLiteral_: 0 int
-FunctionDecl_: binarySearch, int, 00000000
--ParmVarDecl_: a, int *
--ParmVarDecl_: len, int
--ParmVarDecl_: key, int
--CompoundStmt_: locals:0  
---DeclStmt_
----VarDecl_: left, int
----VarDecl_: right, int
----VarDecl_: mid, int
---ExprStmt_
----BinaryOpExpr_: ',', NULL
-----AssignExpr_: '=', NULL
------DeclRefExpr_: left, NULL, 00000000
------IntLiteral_: 0 int
-----AssignExpr_: '=', NULL
------DeclRefExpr_: right, NULL, 00000000
------BinaryOpExpr_: '-', NULL
-------DeclRefExpr_: len, NULL, 00000000
-------IntLiteral_: 1 int
---WhileStmt_
----BinaryOpExpr_: '<=', NULL
-----DeclRefExpr_: left, NULL, 00000000
-----DeclRefExpr_: right, NULL, 00000000
----CompoundStmt_: locals:0  
-----ExprStmt_
------AssignExpr_: '=', NULL
-------DeclRefExpr_: mid, NULL, 00000000
-------BinaryOpExpr_: '/', NULL
--------ParenExpr_ NULL
---------BinaryOpExpr_: '+', NULL
----------DeclRefExpr_: left, NULL, 00000000
----------DeclRefExpr_: right, NULL, 00000000
--------IntLiteral_: 2 int
-----IfStmt_
------BinaryOpExpr_: '==', NULL
-------ArraySubscriptExpr_ NULL
--------DeclRefExpr_: a, NULL, 00000000
--------DeclRefExpr_: mid, NULL, 00000000
-------DeclRefExpr_: key, NULL, 00000000
------ReturnStmt_
-------DeclRefExpr_: mid, NULL, 00000000
------IfStmt_
-------BinaryOpExpr_: '<', NULL
--------ArraySubscriptExpr_ NULL
---------DeclRefExpr_: a, NULL, 00000000
---------DeclRefExpr_: mid, NULL, 00000000
--------DeclRefExpr_: key, NULL, 00000000
-------ExprStmt_
--------AssignExpr_: '=', NULL
---------DeclRefExpr_: left, NULL, 00000000
---------BinaryOpExpr_: '+', NULL
----------DeclRefExpr_: mid, NULL, 00000000
----------IntLiteral_: 1 int
-------ExprStmt_
--------AssignExpr_: '=', NULL
---------DeclRefExpr_: right, NULL, 00000000
---------BinaryOpExpr_: '-', NULL
----------DeclRefExpr_: mid, NULL, 00000000
----------IntLiteral_: 1 int
---ReturnStmt_
----UnaryOpExpr_: '-' NULL
-----IntLiteral_: 1 int
==================
begin to translate f
begin to translate main
begin to translate binarySearch
allocate label: label_0 for 0x7ffec7504d90
allocate label: label_1 for 0x7ffec7504f40
allocate label: label_2 for 0x7ffec7506060
allocate label: label_3 for 0x7ffec7506580
allocate label: label_4 for 0x7ffec7506550
allocate label: label_5 for 0x7ffec7506520
allocate label: label_6 for 0x7ffec7507990
allocate label: label_7 for 0x7ffec7507b00
allocate label: label_8 for 0x7ffec7507b30
allocate label: label_9 for 0x7ffec7507b60
allocate label: label_10 for 0x7ffec7507b90
allocate label: label_11 for 0x7ffec75079c0
allocate label: label_12 for 0x7ffec75079f0
allocate label: label_13 for 0x7ffec7507a20
allocate label: label_14 for 0x7ffec7508940
allocate label: label_15 for 0x7ffec7508970
allocate label: label_16 for 0x7ffec75089a0
allocate label: label_17 for 0x7ffec75089d0
allocate label: label_18 for 0x7ffec7506090
allocate label: label_19 for 0x7ffec7509da0
allocate label: label_20 for 0x7ffec750a030
allocate label: label_21 for 0x7ffec750a410
allocate label: label_22 for 0x7ffec750a440
allocate label: label_23 for 0x7ffec750a940
allocate label: label_24 for 0x7ffec750a970
allocate label: label_25 for 0x7ffec750a910
allocate label: label_26 for 0x7ffec750a3e0
allocate label: label_27 for 0x7ffec750a060
allocate label: label_28 for 0x7ffec750a090
allocate label: label_29 for 0x7ffec7509dd0
global(1): String1, 
locals temporary variables: tmp0, tmp1, tmp2, 
locals variables: b, 
f: 
	tmp0 = a + 1;
	a = tmp0;
	b = 0;
	tmp1 = b + 1;
	b = tmp1;
	tmp2 = a + 1;
	return tmp2;
	goto label_1;
label_1: 
locals temporary variables: tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11, tmp12, tmp13, tmp14, tmp15, tmp16, tmp17, tmp18, tmp19, tmp20, tmp21, tmp22, tmp23, tmp24, tmp25, tmp26, tmp27, tmp28, tmp29, tmp30, tmp31, tmp32, tmp33, tmp34, tmp35, tmp36, tmp37, tmp38, tmp39, tmp40, 
locals variables: a, i, j, c, fp, 
main: 
	tmp1 = &binarySearch;
	tmp0 = tmp1;
	fp = tmp0;
	i = 0;
	tmp2 = &String1;
	c = tmp2;
	tmp3 = i << 2;
	tmp4 = &a;
	tmp5 = tmp4;
	tmp6 = tmp5 + tmp3;
	tmp7 = *tmp6;
	if (tmp7 < 10) goto label_4;
label_3: 
	tmp8 = i << 2;
	tmp9 = &a;
	tmp10 = tmp9;
	tmp11 = tmp10 + tmp8;
	tmp12 = *tmp11;
	if (tmp12 <= 20) goto label_5;
label_4: 
	tmp13 = i << 2;
	tmp14 = &a;
	tmp15 = tmp14;
	tmp16 = tmp15 + tmp13;
	tmp17 = *tmp16;
	*tmp16 = 1;
	tmp18 = *tmp16;
label_5: 
	i = 1;
	goto label_12;
label_6: 
	j = 1;
	goto label_9;
label_7: 
	tmp19 = i << 2;
	tmp20 = &a;
	tmp21 = tmp20;
	tmp22 = tmp21 + tmp19;
	tmp23 = *tmp22;
	tmp24 = i + j;
	*tmp22 = tmp24;
	tmp25 = *tmp22;
label_8: 
	tmp26 = j + 1;
	j = tmp26;
label_9: 
	if (j <= 20) goto label_7;
label_10: 
label_11: 
	tmp27 = i + 1;
	i = tmp27;
label_12: 
	if (i <= 10) goto label_6;
label_13: 
	i = 0;
	goto label_16;
label_14: 
	tmp28 = i << 2;
	tmp29 = &a;
	tmp30 = tmp29;
	tmp31 = tmp30 + tmp28;
	tmp32 = *tmp31;
	tmp33 = 100 - i;
	*tmp31 = tmp33;
	tmp34 = *tmp31;
label_15: 
	tmp35 = i + 1;
	i = tmp35;
label_16: 
	if (i < 10) goto label_14;
label_17: 
	tmp36 = &a;
	tmp37 = tmp36;
	tmp38 = fp(tmp37, 10, 91, );
	i = tmp38;
	tmp39 = tmp36;
	tmp40 = binarySearch(tmp39, 10, 91, );
	i = tmp40;
	return 0;
	goto label_18;
label_18: 
locals temporary variables: tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, tmp11, 
locals variables: left, right, mid, 
binarySearch: 
	left = 0;
	tmp0 = len + -1;
	right = tmp0;
	goto label_27;
label_20: 
	tmp1 = left + right;
	tmp2 = tmp1 >> 1;
	mid = tmp2;
	tmp3 = mid << 2;
	tmp4 = a + tmp3;
	tmp5 = *tmp4;
	if (tmp5 != key) goto label_22;
label_21: 
	return mid;
	goto label_29;
	goto label_26;
label_22: 
	tmp6 = mid << 2;
	tmp7 = a + tmp6;
	tmp8 = *tmp7;
	if (tmp8 > key) goto label_24;
label_23: 
	tmp9 = mid + 1;
	left = tmp9;
	goto label_25;
label_24: 
	tmp10 = mid + -1;
	right = tmp10;
label_25: 
label_26: 
label_27: 
	if (left <= right) goto label_20;
label_28: 
	tmp11 = -1;
	return tmp11;
	goto label_29;
label_29: 
################### basic block: f
tmp0  6
tmp1  7
tmp2  8
################### basic block: label_1
################### basic block: main
tmp0  7
tmp1  6
tmp2  8
tmp3  9
tmp4  10
tmp5  11
tmp6  12
tmp7  13
################### basic block: label_3
tmp8  6
tmp9  7
tmp10  8
tmp11  9
tmp12  10
################### basic block: label_4
tmp13  6
tmp14  7
tmp15  8
tmp16  9
tmp17  10
tmp18  11
################### basic block: label_5
################### basic block: label_6
################### basic block: label_7
tmp19  6
tmp20  7
tmp21  8
tmp22  9
tmp23  10
tmp24  11
tmp25  12
################### basic block: label_8
tmp26  6
################### basic block: label_9
################### basic block: label_10
################### basic block: label_11
tmp27  6
################### basic block: label_12
################### basic block: label_13
################### basic block: label_14
tmp28  6
tmp29  7
tmp30  8
tmp31  9
tmp32  10
tmp33  11
tmp34  12
################### basic block: label_15
tmp35  6
################### basic block: label_16
################### basic block: label_17
tmp36  6
tmp37  7
tmp38  8
tmp39  9
tmp40  10
################### basic block: label_18
################### basic block: binarySearch
tmp0  6
################### basic block: label_20
tmp1  6
tmp2  7
tmp3  8
tmp4  9
tmp5  10
################### basic block: label_21
################### basic block: label_22
tmp6  6
tmp7  7
tmp8  8
################### basic block: label_23
tmp9  6
################### basic block: label_24
tmp10  6
################### basic block: label_25
################### basic block: label_26
################### basic block: label_27
################### basic block: label_28
tmp11  6
################### basic block: label_29
